import cv2
import numpy as np

# Provide the path to your PNG file
image_path = "1.jpg"

# Read the image
image = cv2.imread(image_path)
assert image is not None, f"Failed to load image at {image_path}"

# Convert BGR image to RGB for displaying with OpenCV
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

# Coordinates where you want to plot red dots
coordinates = [
    [464, 111],
 [482, 114],
 [477, 116],
 [498, 119],
 [503, 120],
 [443, 125],
 [516, 125],
 [479, 127],
 [529, 129],
 [470, 135],
 [503, 135],
 [544, 135],
 [430, 136],
 [549, 136],
 [564, 141],
 [528, 145],
 [586, 149],
 [412, 151],
 [471, 152],
 [535, 152],
 [448, 156],
 [455, 156],
 [610, 156],
 [480, 159],
 [495, 160],
 [528, 160],
 [416, 167],
 [431, 167],
 [472, 167],
 [495, 168],
 [644, 168],
 [448, 169],
 [479, 169],
 [386, 173],
 [448, 174],
 [472, 174],
 [464, 175],
 [512, 175],
 [528, 175],
 [431, 176],
 [670, 176],
 [378, 179],
 [608, 180],
 [684, 180],
 [550, 182],
 [439, 183],
 [496, 183],
 [520, 183],
 [479, 184],
 [511, 184],
 [535, 184],
 [591, 184],
 [702, 186],
 [448, 191],
 [474, 191],
 [487, 191],
 [463, 192],
 [687, 192],
 [720, 192],
 [361, 193],
 [728, 195],
 [380, 197],
 [512, 199],
 [568, 199],
 [655, 199],
 [696, 199],
 [456, 200],
 [528, 200],
 [535, 200],
 [671, 200],
 [744, 200],
 [610, 202],
 [755, 205],
 [688, 207],
 [704, 207],
 [719, 207],
 [727, 207],
 [359, 208],
 [559, 208],
 [583, 208],
 [655, 208],
 [663, 208],
 [760, 208],
 [418, 211],
 [543, 213],
 [332, 214],
 [552, 214],
 [504, 215],
 [528, 215],
 [584, 215],
 [597, 215],
 [720, 215],
 [360, 216],
 [575, 216],
 [623, 216],
 [780, 216],
 [352, 217],
 [335, 223],
 [663, 223],
 [672, 223],
 [687, 223],
 [559, 224],
 [607, 224],
 [695, 224],
 [316, 228],
 [738, 229],
 [608, 230],
 [360, 231],
 [396, 231],
 [440, 231],
 [544, 231],
 [584, 231],
 [704, 231],
 [559, 232],
 [623, 232],
 [655, 232],
 [679, 232],
 [687, 232],
 [422, 233],
 [647, 233],
 [329, 234],
 [334, 235],
 [417, 237],
 [640, 237],
 [648, 238],
 [599, 239],
 [654, 239],
 [463, 240],
 [615, 240],
 [624, 240],
 [664, 240],
 [680, 243],
 [426, 245],
 [431, 245],
 [672, 245],
 [335, 246],
 [419, 247],
 [600, 247],
 [656, 247],
 [292, 249],
 [486, 249],
 [374, 250],
 [517, 250],
 [316, 251],
 [326, 251],
 [775, 251],
 [439, 253],
 [311, 254],
 [750, 254],
 [282, 255],
 [303, 255],
 [479, 255],
 [503, 255],
 [592, 255],
 [623, 255],
 [647, 255],
 [688, 255],
 [696, 255],
 [336, 256],
 [415, 256],
 [607, 256],
 [639, 256],
 [671, 256],
 [273, 261],
 [294, 263],
 [358, 263],
 [505, 263],
 [576, 263],
 [488, 264],
 [591, 264],
 [773, 265],
 [479, 266],
 [772, 270],
 [608, 271],
 [623, 271],
 [295, 272],
 [648, 272],
 [663, 272],
 [583, 274],
 [312, 275],
 [494, 275],
 [258, 276],
 [424, 278],
 [277, 279],
 [399, 279],
 [416, 279],
 [312, 280],
 [511, 280],
 [559, 280],
 [700, 281],
 [272, 286],
 [697, 286],
 [391, 287],
 [367, 288],
 [415, 288],
 [431, 288],
 [495, 288],
 [647, 288],
 [671, 288],
 [536, 289],
 [570, 290],
 [479, 291],
 [368, 295],
 [383, 295],
 [519, 295],
 [544, 295],
 [575, 295],
 [584, 295],
 [591, 295],
 [261, 296],
 [271, 296],
 [511, 296],
 [704, 296],
 [503, 297],
 [319, 298],
 [443, 298],
 [755, 298],
 [767, 299],
 [714, 302],
 [631, 303],
 [280, 304],
 [287, 304],
 [407, 304],
 [424, 304],
 [438, 304],
 [488, 304],
 [511, 304],
 [527, 304],
 [544, 304],
 [735, 304],
 [465, 307],
 [608, 307],
 [263, 308],
 [536, 308],
 [450, 309],
 [677, 310],
 [460, 311],
 [496, 311],
 [527, 311],
 [568, 311],
 [583, 311],
 [765, 311],
 [367, 312],
 [383, 312],
 [430, 312],
 [639, 312],
 [728, 312],
 [302, 313],
 [443, 316],
 [545, 317],
 [710, 318],
 [408, 319],
 [496, 319],
 [648, 319],
 [672, 319],
 [735, 319],
 [277, 320],
 [528, 320],
 [623, 320],
 [748, 320],
 [450, 321],
 [698, 322],
 [266, 323],
 [761, 324],
 [360, 326],
 [351, 327],
 [280, 328],
 [407, 328],
 [615, 328],
 [639, 328],
 [659, 328],
 [671, 328],
 [680, 328],
 [758, 329],
 [269, 332],
 [530, 332],
 [464, 335],
 [286, 336],
 [303, 336],
 [401, 336],
 [728, 336],
 [527, 337],
 [472, 338],
 [749, 341],
 [384, 342],
 [392, 342],
 [532, 342],
 [521, 343],
 [428, 344],
 [647, 344],
 [655, 344],
 [679, 344],
 [488, 345],
 [566, 346],
 [496, 347],
 [543, 347],
 [517, 348],
 [303, 351],
 [526, 351],
 [672, 352],
 [740, 354],
 [537, 356],
 [564, 356],
 [640, 357],
 [593, 358],
 [615, 359],
 [702, 359],
 [574, 360],
 [712, 360],
 [720, 360],
 [735, 361],
 [277, 362],
 [607, 362],
 [559, 363],
 [587, 365],
 [279, 367],
 [359, 367],
 [368, 368],
 [383, 368],
 [567, 368],
 [662, 368],
 [280, 372],
 [496, 372],
 [581, 373],
 [560, 374],
 [727, 374],
 [398, 375],
 [343, 378],
 [723, 379],
 [593, 381],
 [598, 382],
 [584, 383],
 [448, 384],
 [543, 384],
 [328, 391],
 [367, 392],
 [568, 392],
 [575, 392],
 [435, 393],
 [287, 394],
 [408, 395],
 [435, 398],
 [447, 398],
 [384, 399],
 [376, 400],
 [463, 400],
 [623, 400],
 [568, 403],
 [312, 405],
 [536, 406],
 [544, 406],
 [407, 407],
 [463, 407],
 [391, 408],
 [446, 408],
 [596, 411],
 [330, 413],
 [519, 415],
 [568, 415],
 [552, 416],
 [648, 416],
 [498, 417],
 [344, 418],
 [605, 421],
 [437, 422],
 [391, 423],
 [408, 423],
 [512, 423],
 [399, 424],
 [469, 424],
 [527, 424],
 [671, 424],
 [616, 427],
 [688, 427],
 [656, 428],
 [374, 431],
 [527, 431],
 [539, 431],
 [551, 431],
 [407, 432],
 [447, 432],
 [567, 432],
 [575, 432],
 [672, 432],
 [687, 432],
 [512, 440],
 [551, 440],
 [655, 440],
 [671, 440],
 [636, 442],
 [567, 446],
 [576, 446],
 [412, 448],
 [487, 448],
 [592, 448],
 [675, 452],
 [552, 454],
 [472, 455],
 [527, 455],
 [575, 455],
 [600, 456],
 [440, 460],
 [668, 461],
 [551, 464],
 [584, 464],
 [454, 467],
 [612, 471],
 [487, 472],
 [466, 473],
 [551, 479],
 [560, 479],
 [575, 480],
 [591, 480],
 [632, 480],
 [652, 482],
 [535, 488],
 [551, 488],
 [575, 488],
 [502, 489],
 [592, 495],
 [601, 496],
 [609, 496],
 [543, 497],
 [608, 501],
 [533, 503],
 [608, 509],
 [592, 511],
 [633, 511],
 [609, 514],
 [626, 521],
 [579, 524],
 [611, 538]
]

# Create a list to store selected points
selected_points = []

# Iterate through each point
for point in coordinates:
    x, y = point
    temp_image = image_rgb.copy()

    # Draw the current point being evaluated
    cv2.circle(temp_image, (x, y), radius=5, color=(0, 255, 0), thickness=-1)
    cv2.putText(temp_image, f"Point: ({x}, {y})", (x + 10, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 1)

    cv2.imshow("Evaluate Points", cv2.cvtColor(temp_image, cv2.COLOR_RGB2BGR))

    # Wait for a key press
    key = cv2.waitKey(0) & 0xFF

    if key == ord('n'):  # Press 'n' to choose the point
        selected_points.append((x, y))
    elif key == ord('k'):  # Press 'k' to skip the point
        continue
    elif key == ord('h'):  # Press 'h' to stop early
        break

cv2.destroyAllWindows()

# Create a new image with only selected points
final_image = image_rgb.copy()
for (x, y) in selected_points:
    cv2.circle(final_image, (x, y), radius=5, color=(255, 0, 0), thickness=-1)
    cv2.putText(final_image, f"({x}, {y})", (x + 10, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 1)

# Display the final image
cv2.imshow("Final Image with Selected Points", cv2.cvtColor(final_image, cv2.COLOR_RGB2BGR))
cv2.waitKey(0)
cv2.destroyAllWindows()

# Save the final image
output_path = "image_with_chosen_points.png"
cv2.imwrite(output_path, cv2.cvtColor(final_image, cv2.COLOR_RGB2BGR))
print(f"Final image with chosen points saved to {output_path}")

# Save selected points to a file
selected_points_path = "chosen_points.txt"
with open(selected_points_path, "w") as file:
    for (x, y) in selected_points:
        file.write(f"{x}, {y}\n")
print(f"Chosen points saved to {selected_points_path}")
