import cv2
import numpy as np

# Provide the path to your PNG file
image_path = "Real_Back.png"

# Read the image
image = cv2.imread(image_path)
assert image is not None, f"Failed to load image at {image_path}"

# Convert BGR image to RGB for displaying with OpenCV
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

# Coordinates where you want to plot red dots
coordinates =[
    [713, 181],
    [771, 181],
    [755, 184],
    [760, 184],
    [782, 185],
    [804, 186],
    [809, 188],
    [824, 188],
    [485, 189],
    [782, 190],
    [847, 193],
    [424, 199],
    [437, 199],
    [784, 200],
    [754, 201],
    [437, 204],
    [412, 205],
    [414, 210],
    [442, 211],
    [366, 216],
    [751, 216],
    [784, 216],
    [733, 217],
    [803, 217],
    [773, 218],
    [790, 218],
    [841, 220],
    [814, 221],
    [414, 222],
    [448, 223],
    [774, 223],
    [788, 223],
    [854, 223],
    [815, 226],
    [788, 229],
    [479, 238],
    [818, 238],
    [416, 239],
    [450, 239],
    [747, 240],
    [396, 244],
    [371, 246],
    [359, 247],
    [344, 249],
    [396, 249],
    [406, 250],
    [808, 252],
    [455, 257],
    [430, 258],
    [780, 259],
    [816, 259],
    [799, 261],
    [395, 265],
    [735, 266],
    [603, 272],
    [728, 273],
    [395, 274],
    [410, 278],
    [435, 279],
    [459, 279],
    [725, 282],
    [745, 282],
    [470, 283],
    [397, 285],
    [750, 285],
    [725, 288],
    [460, 289],
    [813, 289],
    [603, 290],
    [590, 291],
    [618, 291],
    [624, 292],
    [725, 294],
    [628, 297],
    [604, 298],
    [400, 299],
    [477, 299],
    [576, 299],
    [812, 300],
    [457, 301],
    [464, 301],
    [729, 301],
    [723, 307],
    [639, 308],
    [454, 313],
    [796, 313],
    [404, 315],
    [786, 315],
    [739, 316],
    [810, 316],
    [477, 317],
    [723, 317],
    [707, 318],
    [728, 318],
    [684, 319],
    [690, 319],
    [677, 320],
    [645, 321],
    [663, 321],
    [773, 321],
    [736, 323],
    [616, 326],
    [537, 328],
    [563, 328],
    [602, 328],
    [407, 329],
    [609, 329],
    [739, 329],
    [470, 330],
    [508, 330],
    [726, 330],
    [775, 330],
    [488, 331],
    [479, 332],
    [710, 332],
    [703, 333],
    [592, 334],
    [670, 334],
    [651, 335],
    [778, 335],
    [445, 336],
    [478, 338],
    [637, 338],
    [563, 340],
    [726, 340],
    [553, 341],
    [611, 341],
    [527, 342],
    [534, 342],
    [539, 342],
    [598, 342],
    [631, 343],
    [501, 344],
    [506, 344],
    [593, 344],
    [483, 345],
    [511, 345],
    [807, 345],
    [410, 346],
    [472, 346],
    [655, 347],
    [783, 347],
    [728, 350],
    [644, 353],
    [411, 355],
    [578, 355],
    [672, 355],
    [729, 355],
    [807, 355],
    [444, 357],
    [535, 360],
    [657, 360],
    [544, 361],
    [560, 361],
    [413, 363],
    [730, 365],
    [459, 366],
    [561, 366],
    [571, 367],
    [552, 368],
    [749, 370],
    [808, 373],
    [415, 374],
    [580, 374],
    [644, 375],
    [480, 376],
    [602, 376],
    [741, 376],
    [435, 379],
    [753, 379],
    [563, 382],
    [732, 382],
    [798, 385],
    [417, 387],
    [757, 390],
    [589, 394],
    [792, 394],
    [748, 396],
    [812, 396],
    [516, 398],
    [655, 401],
    [802, 401],
    [429, 402],
    [704, 403],
    [453, 404],
    [655, 406],
    [774, 407],
    [793, 408],
    [421, 410],
    [567, 410],
    [606, 410],
    [633, 412],
    [462, 413],
    [646, 414],
    [606, 416],
    [573, 417],
    [809, 417],
    [441, 418],
    [759, 419],
    [424, 420],
    [472, 420],
    [582, 421],
    [589, 421],
    [806, 426],
    [440, 427],
    [799, 428],
    [764, 431],
    [444, 437],
    [427, 438],
    [791, 439],
    [687, 440],
    [468, 442],
    [632, 442],
    [765, 442],
    [804, 443],
    [445, 446],
    [598, 446],
    [646, 447],
    [430, 448],
    [641, 449],
    [776, 449],
    [607, 452],
    [439, 453],
    [639, 454],
    [612, 455],
    [432, 462],
    [464, 467],
    [447, 472],
    [436, 474],
    [794, 477],
    [454, 487],
    [440, 493],
    [629, 496],
    [636, 496],
    [660, 497],
    [602, 502],
    [620, 503],
    [446, 504],
    [649, 504],
    [617, 511],
    [641, 515],
    [632, 519],
]





# [
#     [582, 95],
#     [161, 97],
#     [156, 107],
#     [577, 110],
#     [587, 110],
#     [166, 112],
#     [167, 117],
#     [155, 119],
#     [587, 122],
#     [167, 125],
#     [584, 130],
#     [577, 131],
#     [168, 135],
#     [588, 135],
#     [157, 136],
#     [568, 138],
#     [178, 142],
#     [595, 142],
#     [564, 143],
#     [579, 143],
#     [164, 144],
#     [148, 145],
#     [181, 147],
#     [598, 147],
#     [146, 151],
#     [575, 152],
#     [598, 152],
#     [170, 155],
#     [559, 155],
#     [587, 155],
#     [145, 156],
#     [158, 157],
#     [558, 160],
#     [575, 162],
#     [169, 164],
#     [185, 165],
#     [146, 167],
#     [598, 169],
#     [559, 172],
#     [186, 174],
#     [598, 174],
#     [147, 177],
#     [568, 178],
#     [580, 180],
#     [165, 182],
#     [556, 192],
#     [149, 195],
#     [189, 196],
#     [581, 203],
#     [150, 204],
#     [165, 205],
#     [594, 205],
#     [545, 206],
#     [196, 207],
#     [370, 209],
#     [190, 210],
#     [554, 210],
#     [543, 211],
#     [199, 212],
#     [151, 213],
#     [380, 213],
#     [355, 214],
#     [388, 215],
#     [541, 217],
#     [344, 218],
#     [575, 219],
#     [191, 220],
#     [202, 220],
#     [159, 221],
#     [171, 221],
#     [152, 222],
#     [540, 222],
#     [591, 222],
#     [404, 223],
#     [337, 224],
#     [576, 224],
#     [202, 225],
#     [372, 225],
#     [539, 227],
#     [159, 228],
#     [408, 228],
#     [576, 229],
#     [331, 232],
#     [171, 233],
#     [411, 233],
#     [204, 234],
#     [550, 234],
#     [194, 235],
#     [159, 236],
#     [579, 239],
#     [160, 241],
#     [372, 241],
#     [538, 242],
#     [590, 242],
#     [170, 243],
#     [547, 243],
#     [155, 245],
#     [557, 245],
#     [187, 248],
#     [568, 248],
#     [595, 248],
#     [178, 249],
#     [539, 251],
#     [586, 251],
#     [577, 252],
#     [162, 253],
#     [599, 254],
#     [421, 255],
#     [148, 259],
#     [320, 259],
#     [578, 259],
#     [600, 259],
#     [205, 260],
#     [591, 263],
#     [147, 264],
#     [425, 265],
#     [158, 267],
#     [559, 268],
#     [188, 270],
#     [158, 272],
#     [539, 272],
#     [205, 273],
#     [550, 274],
#     [533, 277],
#     [147, 278],
#     [559, 278],
#     [600, 278],
#     [188, 282],
#     [429, 284],
#     [520, 284],
#     [525, 284],
#     [543, 284],
#     [224, 285],
#     [568, 285],
#     [598, 285],
#     [150, 286],
#     [202, 286],
#     [315, 286],
#     [420, 286],
#     [179, 287],
#     [320, 287],
#     [325, 287],
#     [574, 287],
#     [586, 288],
#     [164, 290],
#     [424, 291],
#     [321, 292],
#     [540, 299],
#     [191, 300],
#     [476, 300],
#     [493, 300],
#     [499, 300],
#     [246, 301],
#     [316, 301],
#     [429, 301],
#     [205, 302],
#     [251, 302],
#     [151, 303],
#     [256, 303],
#     [484, 307],
#     [152, 308],
#     [191, 311],
#     [479, 311],
#     [152, 313],
#     [472, 314],
#     [206, 315],
#     [275, 317],
#     [192, 318],
#     [556, 318],
#     [466, 319],
#     [206, 320],
#     [280, 320],
#     [431, 320],
#     [153, 322],
#     [540, 323],
#     [456, 325],
#     [154, 327],
#     [367, 328],
#     [372, 328],
#     [377, 328],
#     [451, 328],
#     [296, 330],
#     [154, 332],
#     [305, 333],
#     [381, 333],
#     [441, 334],
#     [554, 337],
#     [194, 338],
#     [317, 339],
#     [428, 339],
#     [155, 341],
#     [540, 342],
#     [156, 350],
#     [552, 350],
#     [404, 353],
#     [315, 354],
#     [560, 354],
#     [189, 357],
#     [157, 359],
#     [327, 360],
#     [197, 364],
#     [370, 366],
#     [380, 366],
#     [158, 368],
#     [361, 368],
#     [387, 368],
#     [337, 370],
#     [542, 370],
#     [397, 372],
#     [353, 373],
#     [316, 374],
#     [159, 377],
#     [401, 377],
#     [428, 378],
#     [317, 379],
#     [345, 379],
#     [342, 384],
#     [521, 384],
#     [232, 386],
#     [407, 386],
#     [160, 388],
#     [322, 389],
#     [341, 389],
#     [227, 393],
#     [341, 394],
#     [161, 396],
#     [235, 396],
#     [408, 396],
#     [543, 397],
#     [341, 399],
#     [330, 400],
#     [525, 400],
#     [492, 401],
#     [518, 401],
#     [235, 402],
#     [416, 402],
#     [227, 406],
#     [406, 409],
#     [163, 410],
#     [343, 410],
#     [521, 411],
#     [561, 420],
#     [189, 423],
#     [543, 423],
#     [456, 424],
#     [521, 425],
#     [404, 426],
#     [233, 427],
#     [552, 430],
#     [186, 431],
#     [403, 434],
#     [168, 437],
#     [205, 439],
#     [503, 439],
#     [320, 440],
#     [498, 442],
#     [545, 443],
#     [169, 445],
#     [402, 447],
#     [420, 447],
#     [545, 448],
#     [350, 457],
#     [401, 458],
#     [390, 466],
#     [573, 466],
#     [174, 467],
#     [361, 467],
#     [562, 467],
#     [189, 469],
#     [388, 471],
#     [180, 472],
#     [561, 472],
#     [190, 475],
#     [388, 478],
#     [206, 479],
#     [447, 479],
#     [546, 481],
#     [364, 482],
#     [558, 482],
#     [433, 490],
#     [547, 490],
#     [204, 491],
#     [204, 496],
#     [365, 500],
#     [197, 502],
#     [549, 503],
#     [386, 510],
#     [407, 510],
#     [367, 515],
#     [550, 515],
#     [201, 516],
#     [365, 522],
#     [387, 524],
#     [549, 526],
#     [380, 527],
#     [374, 528],
# ]




# Create a list to store selected points
selected_points = []

# Iterate through each point
for i, point in enumerate(coordinates):
    x, y = point
    temp_image = image_rgb.copy()

    # Draw all selected points so far
    for (sx, sy) in selected_points:
        cv2.circle(temp_image, (sx, sy), radius=5, color=(255, 0, 0), thickness=-1)

    # Highlight the current point being evaluated
    cv2.circle(temp_image, (x, y), radius=5, color=(0, 255, 0), thickness=-1)
    cv2.putText(temp_image, f"Point: ({x}, {y})", (x + 10, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 1)

    cv2.imshow("Evaluate Points", cv2.cvtColor(temp_image, cv2.COLOR_RGB2BGR))

    # Wait for a key press
    key = cv2.waitKey(0) & 0xFF

    if key == ord('n'):  # Press 'n' to choose the point
        selected_points.append((x, y))
    elif key == ord('k'):  # Press 'k' to skip the point
        continue
    elif key == ord('h'):  # Press 'h' to stop early
        break
    elif key == ord('b'):  # Press 'b' to undo the last choice
        if selected_points:
            selected_points.pop()
            print("Last selection undone.")
            i -= 1  # Go back to the previous point
        else:
            print("No selections to undo.")

cv2.destroyAllWindows()

# Create a new image with only selected points
final_image = image_rgb.copy()
for (x, y) in selected_points:
    cv2.circle(final_image, (x, y), radius=5, color=(255, 0, 0), thickness=-1)
    cv2.putText(final_image, f"({x}, {y})", (x + 10, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 1)

# Display the final image
cv2.imshow("Final Image with Selected Points", cv2.cvtColor(final_image, cv2.COLOR_RGB2BGR))
cv2.waitKey(0)
cv2.destroyAllWindows()

# Save the final image
output_path = "image_with_chosen_points_20250414.png"
cv2.imwrite(output_path, cv2.cvtColor(final_image, cv2.COLOR_RGB2BGR))
print(f"Final image with chosen points saved to {output_path}")

# Save selected points to a file
selected_points_path = "chosen_points_20250414.txt"
with open(selected_points_path, "w") as file:
    for (x, y) in selected_points:
        file.write(f"{x}, {y}\n")
print(f"Chosen points saved to {selected_points_path}")