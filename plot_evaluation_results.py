import pandas as pd
import matplotlib.pyplot as plt
import argparse
import os

def plot_results(csv_file_path):
    """
    Reads the enhanced VAPE evaluation results from a CSV file, 
    prints statistics, plots all error types for comparison, and saves the plot.
    """
    # --- 1. Input Validation ---
    if not os.path.exists(csv_file_path):
        print(f"❌ Error: File not found at '{csv_file_path}'")
        return

    print(f"Processing file: {csv_file_path}")

    # --- 2. Data Loading ---
    try:
        df = pd.read_csv(csv_file_path)
    except Exception as e:
        print(f"❌ Error: Failed to read or parse CSV file. {e}")
        return

    if df.empty:
        print("⚠️ Warning: The CSV file is empty. No data to plot.")
        return

    # --- 3. Print Statistics ---
    print("\n--- Error Statistics ---")
    for err_type in ["meas", "pred", "filt"]:
        pos_col = f'{err_type}_pos_err_cm'
        rot_col = f'{err_type}_rot_err_deg'
        if pos_col in df.columns and not df[pos_col].dropna().empty:
            pos_err = df[pos_col].dropna()
            rot_err = df[rot_col].dropna()
            print(f"\n-- {err_type.upper()} --")
            print(f"  Position (cm): Mean={pos_err.mean():.2f}, Median={pos_err.median():.2f}, Std={pos_err.std():.2f}")
            print(f"  Rotation (deg): Mean={rot_err.mean():.2f}, Median={rot_err.median():.2f}, Std={rot_err.std():.2f}")

    # --- 4. Plotting ---
    print("\nGenerating plots...")
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(16, 12), sharex=True)
    fig.suptitle('VAPE Pose Estimation Error Analysis', fontsize=18, weight='bold')

    styles = {
        'meas': {'color': '#d62828', 'linestyle': ':', 'label': 'Measurement (Raw VAPE)', 'zorder': 1},
        'pred': {'color': '#f77f00', 'linestyle': '--', 'label': 'Prediction (UKF Pre-Update)', 'zorder': 2},
        'filt': {'color': '#0077b6', 'linestyle': '-', 'label': 'Filtered (UKF Post-Update)', 'zorder': 3}
    }

    # Plot Position Errors
    ax1.set_title('Position Error vs. Frame (Log Scale)', fontsize=14)
    ax1.set_ylabel('Position Error (cm)', fontsize=12)
    for err_type in ['meas', 'pred', 'filt']:
        col = f'{err_type}_pos_err_cm'
        if col in df.columns:
            ax1.plot(df['frame_id'], df[col], marker='.', markersize=4, alpha=0.7, **styles[err_type])
    ax1.grid(True, which='both', linestyle='--', linewidth=0.5)
    ax1.legend(fontsize=10)
    ax1.set_yscale('log')
    ax1.minorticks_on()

    # Plot Rotation Errors
    ax2.set_title('Rotation Error vs. Frame (Log Scale)', fontsize=14)
    ax2.set_ylabel('Rotation Error (deg)', fontsize=12)
    ax2.set_xlabel('Frame ID', fontsize=12)
    for err_type in ['meas', 'pred', 'filt']:
        col = f'{err_type}_rot_err_deg'
        if col in df.columns:
            ax2.plot(df['frame_id'], df[col], marker='.', markersize=4, alpha=0.7, **styles[err_type])
    ax2.grid(True, which='both', linestyle='--', linewidth=0.5)
    ax2.legend(fontsize=10)
    ax2.set_yscale('log')
    ax2.minorticks_on()

    plt.tight_layout(rect=[0, 0.03, 1, 0.95])

    # --- 5. Save Output ---
    base_name = os.path.splitext(csv_file_path)[0]
    output_filename = base_name + '_plot.png'
    try:
        plt.savefig(output_filename, dpi=150)
        print(f"\n✅ Plot saved successfully to: {output_filename}")
    except Exception as e:
        print(f"❌ Error: Failed to save plot. {e}")

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="Plot detailed evaluation results from a VAPE KF Evaluator CSV log.",
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument(
        'csv_file',
        type=str,
        help="Path to the input CSV file generated by the evaluator script.\nExample: python3 plot_evaluation_results.py output/evaluation_log_20250815-143000.csv"
    )
    args = parser.parse_args()
    plot_results(args.csv_file)